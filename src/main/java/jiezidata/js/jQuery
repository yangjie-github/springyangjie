/* 1. jQuery本身是一个闭包 （立即执行的函数）
*  2. jQuery为什么用闭包  --> 避免多个框架的冲突
*  3. jQuery怎样让外界访问内部定义的局部变量 --> window.jQuery = window.$ = jQuery();
*  4. jQuery问什么要传window参数? 方便后期压缩代码，为了提高查找的效率
*  5. 4. jQuery问什么要传undefined参数? 方便后期压缩代码，IE9一下可以被修改，为了内部的undefined不被修改，所以接受这个参数
*/
(function (window, undefined) {
    //定义变量位置
    var jQuery = function () {
        return new jQuery.fn.init();
    };

    //将局部变量赋值给全局变量
    window.jQuery = window.$ = jQuery();
})(window);

/*例如 */
function test() {
    console.log(1);
}
test();
/*上面可以改写成 (闭包)*/
(function test() {
    console.log(1);
})();


/*
 * 1.js入口函数会等到图片加载完才会执行，可以获取到图片的宽高============================================
 */
window.onload = function (ev) {
    var img = document.getElementsByTagName("img")[0];
};

/*
   2.jQuery的入口函数会在dom加载完就会加载，不会等到图签加载 , 获取不到宽高==================================
 */
$(function() {
    var img = $("img")[0];
});

/* 3. jQuery的冲突问题 --> 别的框架也使用了$, 两个框架都使用$*/============================================
/*释放$的使用权   就不能使用$ 而使用jQuery , 释放操作在编写代码之前*/
jQuery.noConflict();
/*定义别名*/
var yj = jQuery.noConflict();
yj(function () {
    alert(1)
});

/* 4. jQuery的核心函数*/==============================================================================
$();

/* 5. jQuery对象*/=========================================================================================
//jQuery对象是一个伪数组 --> 伪数组是有0-length-1的属性，并有length属性

/* 6. jQuery对象的静态方法和实例方法*/===============================================================
//定义一个类
function AClass() {

}
//给类添加静态方法
AClass().staticMethod = function () {
    alert("staticMethod")
};
//调用静态方法
AClass.staticMethod();
//给类添加一个实例方法，实例方法是添加给类的原型的（prototype）
AClass.prototype.instanceMethod = function () {
    alert("instanceMethod")
};
//创建实例
var a = new AClass();
//调用实例方法
a.instanceMethod();

/* 7. 原型对象的理解*/=========================================================================
(function (window) {
    function Player() {
        return new Player.prototype.init();
    }
    Player.property = {
        constructor: Player,
        init: function () {

        }
    };
    Player.prototype.init.prototype = Player.prototype;
    window.Player = Player;
})(window);
8. jQuery的扩展插件
    8.1 扩展静态方法
        $.extend({
            staticMethod:function() {
                alert("staticMethod");
            }
        })
        $.staticMethod(); //调用扩展的方法
    8.2 扩展实例方法
        $.fn.extend({
            instanceMethod:function() {
                alert("instanceMethod");
            }
        })
        $("div").instanceMethod(); //调用实例方法
9. 模仿jQuery 写一个脚本==========================================================================
    (function () {

        var jQuery = window.jQuery = window.$ = function () { //暴露外部使用借口
            return new jQuery.fn.init(selector);
        };

        var jQuery.fn = jQuery.prototype = { // 处理原型对象
            init:function (selector) {
                var elements = documents.getElementsByTagName(selector);
                Array.prototype.push.apply(this,elements);
                return this;
            },
            jQuery:"1.0.0",
            length:0,
            size:function () {
                return this.length;
            }
        };

        jQuery.fn.init.prototype = jQuery.fn;

        jQuery.extend = jQuery.fn.extend = function () { //实现继承,只处理只有参数情况，即插件的扩展
            var o = arguments[0];
            for (var p in o) {
                this[p] = o[p];
            }
        };

        jQuery.extend({ //添加静态方法  一个参数
            trim:function (text) {
                return (text||"").replace(/^\s+|\s+$/g,"");
            }
        });

        jQuery.fn.extend({}); //添加实例方法

    })();
10. 数组型对象创建
    10.1
        var 0 = {};
        var arr = [4,5,6];
        for (var i = 0; i< arr.length; i++) {
            o[i] = arr[i];
        }
        o.length = arr.length; // o就类似一个数组
    10.2
        jQuery里面的对象就是一个伪数组，但是jQuery的实现不是这样的
        jQuery是通过调用数组的push方法；
        var o = {};
        var divs = document.getElementsByTagName("div"); //拿到所有div;
        Array.prototype.push.apply(o, div); //apply第二个参数是数组； 这就将数组的内容加到对象o里面；
11. jQuery.extend({},{},{}); //当有多个对象时，是将后面的东西全加到第一个对象中去；
    jQuery.extend(true,{},{}); //表示控制浅拷贝和深拷贝，将true后面的参数加到第一个对象中去
12. 实现链式操作
    var o = {css:function () {return this;}};












































