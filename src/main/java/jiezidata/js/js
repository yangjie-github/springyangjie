预处理=================================================================================================
1. js的解析第一步，预处理：创建环境 ，创建对象
    LexicalEnvironment{
        //这里面放的是声明式创建的对象名 和 函数名
        a : undefined //在执行阶段才会进行赋值
        xxx : 对函数的一个引用
    }
    //声明式创建，如果有var = a ，则会将a的值放在环境里面，没有赋值的话是undefined
    var a = 5;
    function xxx() {
    }
    var g = function() {}//这是函数表达式，不会扫描
    c = 5;没有用var 不会扫描
2. 在预处理有两个f变量：先扫描函数声明，后扫描变量， 处理函数声明会覆盖，处理变量冲突会忽略
    var f = 5;
    function f() {}
执行阶段===================================================================================================
1. 会进行赋值

函数======================================================================================================
1. 函数和上面一样 ，也会有预处理阶段和执行阶段
    function f(a, b) {
        alert(a);
        alert(b);
        var b = 100;
        c = 100; 如果没有用var声明，则会加到全局的词法环境里面去。用window.c可以调用到
        function a() {
            console.log(123);
        }
    }
    f(1, 2);//在调用时候才初始化词法环境。 在预处理有两个f变量：先扫描函数声明，后扫描变量， 处理函数声明会覆盖，处理变量冲突会忽略
    输出结果是 ,a是函数a的内容， b是2

作用域（js是词法作用域）=====================================================================================================
1. 块级作用域  * js里面没有块级作用域
    {}是块级作用域
    for(var i = 1; i < 3; i++){
    }
    alert(i); // 可以访问到i = 3；
2. 函数作用域-->js本身是静态作用域，所以f()是没有x的值的。
    2.1动态作用域
    function f() {
        alert(x);
    }
    function f1() {
        var x = 5;
        f();
    }
    function f2() {
        var x = 6;
        f();
    }
3. 静态作用域（词法作用域或闭包）--> 在声明时候就已经确定了作用域
    分为两部分 3.1 在创建函数时候 (就是一行一行读取解析代码的时候) ，
                    * 会给函数本身添加一个成员[[scope]] == lexicalEnv(词法环境) == window(指向window)
             3.2 执行的时候回创建自己的词法环境
                    function f() {
                            alert(x);
                        }
                        function f1() {
                            var x = 5;
                            f();
                            // 在这里执行的时候会创建自己的词法环境，会与f 函数本身的词法环境相关联 f ->[[scope]],
                                会在f里面的词法环境里面找x ,没有的话会在window里面找。没有
                        }
                        function f2() {
                            var x = 6;
                            f();
                        }

    function f() {
        var x = 100;
        function g() {
            alert(x); 此时g 的词法环境 == f 的词法环境
        }
    }

    如果是new Function创建的函数
        var f = new Function("","alert(111)//函数体");
        用new Function创建函数的作用域指向全局window，不会指向父词法环境
            function f() {
            var x = 100;
                var g = new Function("","alert(x)"");
                g();//不会输出100， 因为作用域指向全局window， 若在外部定义 x = 100,则会调到
            }
闭包=============================================================================================
1. 什么是闭包  Closure
    闭包就是能够读取其他函数内部变量的函数。
    例如在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“定义在一个函数内部的函数“。
    在本质上，闭包是将函数内部和函数外部连接起来的桥梁。
    闭包就是一个函数，里面包含着父函数的变量。
    function f() {
        var a = 100;
        var b = 200;
        function g() {
            console.log(a);
        }
    }
2. 闭包是什么时候创建的
    g()创建词法环境时候创建，用到父类变量的时候。（没有用到父类变量的时候不会产生闭包）；
    若用爷爷的变量，则会产生闭包。
3. 闭包的本质是创建一个作用域

闭包的作用====================================================================================
1. 减少全局变量：
    function f() {
        var a = 0;
        return function() {
            a++;
            alert(a);
        }
    }
    var res = f();
    res();
2. 减少传递参数的数量
3. 封装
创建对象的两种方式===============================================================================
1. var v = {}
2. var v1 = new Object();
    两种方式创建的对象是一样的；可以通过构造器来验证
        在控制台输入 v.constructor === v1.constructor  返回true; constructor是每个对象的构造器
    构造器是一个模具，用来创建对象
创建对象工厂===============================================================================
1. function personFactory(pName, pAge) {
        return {
            name:pName,
            age:pAge
        }
    }
    var p1 = personFactory("11","22);
创建一个对象（对象工厂）==================================================================================
1. function Person() {
        //class 当吧函数当做类来使用时，首字母哟啊大写 ，普通的函数， 首字母小写；
        var age = 30;// 这个age new出来的person是访问不到的;
        this.age = 22; // 这两个可以访问到；this指的是new 出来的对象；
        this.name = "yj";
    }
    var p1 = new Person(); //new一个对象
    var p2 = new Person();
        此时存在一个问题，两个对象共有的属性，不能提取出来；两个对象有重复的属性会浪费系统资源
2. 解决上面问题
    2.1 每个函数都有一个原型属性 prototype ,可以将共有的属性加在原型属性上。只有函数才有prototype。每个函数其实都是一个对象。
    2.2 prototype 是函数的一个属性 ——》指向对象（构造器）;
    2.3 prototype是对象类型， 验证-》 typeof p.prototype  返回object
    2.4 通过构造器找到原型 p.constructor.prototype
    2.5 每一个对象都有一个隐藏的prototype属性
this===============================================================================================
1. this 的指向是一个对象
2. this 的指向
    var 0 = {
        name: "cj",
        print: function() {
            console.log(this.name)
        }
    }
    o.print();//this指向0 ， 谁调用指向谁
    var f = o.print;
    f(); //undefined  此时实际是 window.f(); 此时0里面的this指向window, 所以是undefined;
        在运行时，函数是谁调用的，this就是谁。并不是在编译时决定this是谁。
3. 改变this的指向
    function print(a, b) {
        console.log(this.[a]);
        console.log(this.[b]);
    }
    print.call(o, "name", "age"); // 等价于o.print； call可以改变this的指向，第一个参数是目标对象，即要改变的this指向；
    print.apply(o,["name", "age"]); //apply接受的值一个数组
封装============================================================================================================
1. 命名空间
2. 静态成员
    function Person() {}
    //给person加一个静态成员， 静态都是类名.来调用
    Person.userTools = true;
    //调用
    Person.userTools;
    var p1 = new Person();// 创建一个实例
    p1.useTools; //是访问不了的
3. 公有方法
    function Person(name) {
        var age = 100; //私有属性
        function pm() { //私有方法
            console.log("private method");
        }
        this.name = name; //公有方法
        this.test = function() { // 公有方法
            console.log("public method");
        }
    }
创建父子关系==============================================================================================
1. function P() {}
   function C() {}
   C.prototype = P.prototype;
   var c1 = new C();
   C1 instanceof C; // 返回true
   C1 instanceof P; //返回true
      C.prototype = P.prototype; //这样的坏处，子的东西可以被父访问，这种方式强烈不推荐
2. C.prototype = new P(); //改进 不会吧紫的东西暴露给父，但是new对象会浪费内存
3. function P() {}
   function C() {}
   function F() {}
   F.prototype = P.prototype;
   var f = new F();
   C.prototype = f;



















