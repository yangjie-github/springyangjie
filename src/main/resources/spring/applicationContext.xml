<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- spring配置文件，主要配置和业务逻辑有关的 -->
    <!-- 数据源、事务控制 -->

    <!-- ==========================1、扫描组件 ================================================= -->
    <context:component-scan base-package="cn.mylife">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- ==========================2、引入外部配置文件  datasouurce和shiro=============================== -->
    <!--引入单个配置文件, 注意多个配置文件时候要加上ignore-unresolvable="true"-->
    <context:property-placeholder location="classpath:dataSource/dbConfig.properties" ignore-unresolvable="true"/>

    <import resource="classpath:shiro/applicationContext-shiro.xml"/>
    <import resource="classpath:activiti/applicationActiviti.xml"/>
    <import resource="classpath:quartz/spring-quartz.xml"/>
    <import resource="classpath:redis/spring-redis.xml"/>

    <!-- ==========================3、配置数据源 ================================================= -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- ==========================4、配置和mybatis的整合 ================================================= -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定mybatis全局配置文件位置 -->
        <property name="configLocation" value="classpath:mybatis/mybatis.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定mybatis的mapper文件  -->
        <property name="mapperLocations" value="classpath:cn/mylife/modules/user/dao/*.xml"/>
    </bean>

    <!-- ==========================5、配置扫描器，将mybatis的接口实现加入到IOC容器中 =============================== -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有的Dao接口的实现 -->
        <property name="basePackage" value="cn.mylife.modules"/>
    </bean>

    <!-- ==========================6、事务控制 =============================== -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 开启基于注解的事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->
    <!-- 使用xml配置 -->
    <aop:config>
        <!-- 切入点的配置   public可以省略，service后面的两个点表示及其子包，后面的*所有类所有方法,(..)表示参数任意多-->
        <aop:pointcut id="txPoint" expression="execution(public * cn.mylife.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!-- 配置事务如何切入,配置事务增强   默认值是transactionManager-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!-- 认为以get开始的方法都是查询，配置readonly = true -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- ==========================7、配置可以批量操作的sqlSession =============================== -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!-- ==========================8、配置quartz无法注入service问题 =============================== -->
    <bean id="jobFactory" class="cn.mylife.utils.quartz.MyJobFactory"/>

    <!-- ==========================9、配置solrJ =============================== -->
    <bean id="solrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
        <constructor-arg value="http://localhost:8080/solr/cellection1"/>
    </bean>

</beans>